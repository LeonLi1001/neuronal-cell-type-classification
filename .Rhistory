}
# Include the code you used to generate the plot in this block. When you knit your document the plot will be generated and displayed below.
# merged <- read.table("merged.bed", quote="\"", comment.char="")
# merged = merged[sample(1:1867199, 200000, replace = FALSE),]
# colnames(merged) = c("read_ID","chr_hg38","start_hg38","end_hg38","score_hg38","chr_hg19","start_hg19","end_hg19","score_hg19")
# merged$cleaned_chr_hg38 = rep("other", length(merged$read_ID))
# merged$cleaned_chr_hg19 = rep("other", length(merged$read_ID))
for (i in 150000:200000){ #length(merged$read_ID)
chr_38 = unlist(strsplit(merged$chr_hg38[i], split = "_"))[1]
if(grepl(".*\\b(chr[0-9]+).*", chr_38)){
merged$cleaned_chr_hg38[i] = chr_38
}
chr_19 = unlist(strsplit(merged$chr_hg19[i], split = "_"))[1]
if(grepl(".*\\b(chr[0-9]+).*", chr_19)){
merged$cleaned_chr_hg19[i] = chr_19
}
print(i)
}
unique(merged$cleaned_chr_hg38)
unique(merged$cleaned_chr_hg19)
View(merged)
table(merged$cleaned_chr_hg38)
table(merged$cleaned_chr_hg19)
# Include the code you used to generate the plot in this block. When you knit your document the plot will be generated and displayed below.
library(dplyr)
mean_scores <- merged %>%
group_by(chr_hg38, chr_hg19) %>%
summarize(mean_score_hg38 = mean(score_hg38),
mean_score_hg19 = mean(score_hg19))
length(unique(merged$cleaned_chr_hg38))
length(unique(c(unique(merged$cleaned_chr_hg38), unique(merged$cleaned_chr_hg19))))
unique(merged$cleaned_chr_hg38)
unique(merged$cleaned_chr_hg19)
order(unique(merged$cleaned_chr_hg38))
sort(unique(merged$cleaned_chr_hg38))
sort(unique(merged$cleaned_chr_hg19))
identical(sort(unique(merged$cleaned_chr_hg38)), sort(unique(merged$cleaned_chr_hg19)))
mean_score = data.frame(chr = sort(unique(merged$cleaned_chr_hg19)), hg19 = rep(0, 23), hg38 = rep(0,23))
rm(mean_scores)
# Include the code you used to generate the plot in this block. When you knit your document the plot will be generated and displayed below.
mean_score = data.frame(chr = sort(unique(merged$cleaned_chr_hg19)), hg19 = rep(0, 23), hg38 = rep(0,23))
for (i in 1:23){
mean_score$hg19[i] = mean(merged$score_hg19[which(merged$cleaned_chr_hg19 == mean_score$chr[i])])
mean_score$hg38[i] = mean(merged$score_hg38[which(merged$cleaned_chr_hg38 == mean_score$chr[i])])
}
View(mean_score)
merged$score_hg19[which(merged$cleaned_chr_hg19 == mean_score$chr[1])]
# Include the code you used to generate the plot in this block. When you knit your document the plot will be generated and displayed below.
mean_score = data.frame(chr = sort(unique(merged$cleaned_chr_hg19)), hg19 = rep(0, 23), hg38 = rep(0,23))
for (i in 1:23){
mean_score$hg19[i] = mean(merged$score_hg19[which(merged$cleaned_chr_hg19 == mean_score$chr[i])])
mean_score$hg38[i] = mean(merged$score_hg38[which(merged$cleaned_chr_hg38 == mean_score$chr[i])])
}
# Load ggplot2 library
library(ggplot2)
# Reshape the data from wide to long format
library(tidyr)
df_long <- pivot_longer(df, cols = c(hg19, hg38), names_to = "Alignment", values_to = "Value")
library(tidyr)
df_long <- pivot_longer(df, cols = c(hg19, hg38), names_to = "Alignment", values_to = "Value")
barplot(mean_score, beside = TRUE, col = c("blue", "red"), legend.text = TRUE, main = "Comparison of Objects", xlab = "Groups", ylab = "Values")
# Include the code you used to generate the plot in this block. When you knit your document the plot will be generated and displayed below.
mean_score = data.frame(chr = sort(unique(merged$cleaned_chr_hg19)), hg19 = rep(0, 23), hg38 = rep(0,23))
for (i in 1:23){
mean_score$hg19[i] = mean(merged$score_hg19[which(merged$cleaned_chr_hg19 == mean_score$chr[i])])
mean_score$hg38[i] = mean(merged$score_hg38[which(merged$cleaned_chr_hg38 == mean_score$chr[i])])
}
barplot(matrix(mean_score), beside = TRUE, col = c("blue", "red"), legend.text = TRUE, main = "Comparison of Objects", xlab = "Groups", ylab = "Values")
# Include the code you used to generate the plot in this block. When you knit your document the plot will be generated and displayed below.
mean_score = data.frame(chr = sort(unique(merged$cleaned_chr_hg19)), hg19 = rep(0, 23), hg38 = rep(0,23))
for (i in 1:23){
mean_score$hg19[i] = mean(merged$score_hg19[which(merged$cleaned_chr_hg19 == mean_score$chr[i])])
mean_score$hg38[i] = mean(merged$score_hg38[which(merged$cleaned_chr_hg38 == mean_score$chr[i])])
}
barplot(matrix(mean_score[,2:3]), beside = TRUE, col = c("blue", "red"), legend.text = TRUE, main = "Comparison of Objects", xlab = "Groups", ylab = "Values")
mean_score[,2:3]
matrix(mean_score[,2:3])
vector(mean_score[,2:3])
# Include the code you used to generate the plot in this block. When you knit your document the plot will be generated and displayed below.
mean_score = data.frame(chr = sort(unique(merged$cleaned_chr_hg19)), hg19 = rep(0, 23), hg38 = rep(0,23))
for (i in 1:23){
mean_score$hg19[i] = mean(merged$score_hg19[which(merged$cleaned_chr_hg19 == mean_score$chr[i])])
mean_score$hg38[i] = mean(merged$score_hg38[which(merged$cleaned_chr_hg38 == mean_score$chr[i])])
}
barplot(as.matrix(mean_score[,2:3]), beside = TRUE, col = c("blue", "red"), legend.text = TRUE, main = "Comparison of Objects", xlab = "Groups", ylab = "Values")
# Include the code you used to generate the plot in this block. When you knit your document the plot will be generated and displayed below.
mean_score = data.frame(chr = sort(unique(merged$cleaned_chr_hg19)), hg19 = rep(0, 23), hg38 = rep(0,23))
for (i in 1:23){
mean_score$hg19[i] = mean(merged$score_hg19[which(merged$cleaned_chr_hg19 == mean_score$chr[i])])
mean_score$hg38[i] = mean(merged$score_hg38[which(merged$cleaned_chr_hg38 == mean_score$chr[i])])
}
barplot(t(as.matrix(mean_score[,2:3])), beside = TRUE, col = c("blue", "red"), legend.text = TRUE, main = "Comparison of Objects", xlab = "Groups", ylab = "Values")
# Include the code you used to generate the plot in this block. When you knit your document the plot will be generated and displayed below.
mean_score = data.frame(chr = sort(unique(merged$cleaned_chr_hg19)), hg19 = rep(0, 23), hg38 = rep(0,23))
for (i in 1:23){
mean_score$hg19[i] = mean(merged$score_hg19[which(merged$cleaned_chr_hg19 == mean_score$chr[i])])
mean_score$hg38[i] = mean(merged$score_hg38[which(merged$cleaned_chr_hg38 == mean_score$chr[i])])
}
barplot(t(as.matrix(mean_score[,2:3])), names.arg = mean_score$chr, beside = TRUE, col = c("blue", "red"), legend.text = TRUE, main = "Comparison of Objects", xlab = "Groups", ylab = "Values")
mean_score$chr
mean_score
# Include the code you used to generate the plot in this block. When you knit your document the plot will be generated and displayed below.
mean_score = data.frame(chr = sort(unique(merged$cleaned_chr_hg19)), hg19 = rep(0, 23), hg38 = rep(0,23))
for (i in 1:23){
mean_score$hg19[i] = mean(merged$score_hg19[which(merged$cleaned_chr_hg19 == mean_score$chr[i])])
mean_score$hg38[i] = mean(merged$score_hg38[which(merged$cleaned_chr_hg38 == mean_score$chr[i])])
}
barplot(t(as.matrix(mean_score[,2:3])), names.arg = mean_score$chr, beside = TRUE, col = c("blue", "red"), legend.text = TRUE, main = "difference in mean alignment score between the hg19 (lifted-over) and hg38 alignments", xlab = "Autosomal chromosomes", ylab = "Mean alignment score")
# Include the code you used to generate the plot in this block. When you knit your document the plot will be generated and displayed below.
mean_score = data.frame(chr = sort(unique(merged$cleaned_chr_hg19)), hg19 = rep(0, 23), hg38 = rep(0,23))
for (i in 1:23){
mean_score$hg19[i] = mean(merged$score_hg19[which(merged$cleaned_chr_hg19 == mean_score$chr[i])])
mean_score$hg38[i] = mean(merged$score_hg38[which(merged$cleaned_chr_hg38 == mean_score$chr[i])])
}
barplot(t(as.matrix(mean_score[,2:3])), names.arg = mean_score$chr, beside = TRUE, col = c("blue", "red"), legend.text = TRUE, main = "Difference in mean alignment score between the hg19 and hg38", xlab = "Autosomal chromosomes", ylab = "Mean alignment score")
# Include the code you used to generate the plot in this block. When you knit your document the plot will be generated and displayed below.
mean_score = data.frame(chr = sort(unique(merged$cleaned_chr_hg19)), hg19 = rep(0, 23), hg38 = rep(0,23))
for (i in 1:23){
mean_score$hg19[i] = mean(merged$score_hg19[which(merged$cleaned_chr_hg19 == mean_score$chr[i])])
mean_score$hg38[i] = mean(merged$score_hg38[which(merged$cleaned_chr_hg38 == mean_score$chr[i])])
}
barplot(t(as.matrix(mean_score[,2:3])), names = mean_score$chr, beside = TRUE, col = c("blue", "red"), legend.text = TRUE, main = "Difference in mean alignment score between the hg19 and hg38", xlab = "Autosomal chromosomes", ylab = "Mean alignment score")
# Include the code you used to generate the plot in this block. When you knit your document the plot will be generated and displayed below.
mean_score = data.frame(chr = sort(unique(merged$cleaned_chr_hg19)), hg19 = rep(0, 23), hg38 = rep(0,23))
for (i in 1:23){
mean_score$hg19[i] = mean(merged$score_hg19[which(merged$cleaned_chr_hg19 == mean_score$chr[i])])
mean_score$hg38[i] = mean(merged$score_hg38[which(merged$cleaned_chr_hg38 == mean_score$chr[i])])
}
barplot(t(as.matrix(mean_score[,2:3])), names = mean_score$chr, beside = TRUE, col = c("blue", "red"), legend.text = TRUE, main = "Difference in mean alignment score between the hg19 and hg38", xlab = "Autosomal chromosomes", ylab = "Mean alignment score", las = 2)
write.csv(mean_score, "mean_score.csv")
write.csv(mean_score, "/Users/leonli/Desktop/BMEG\ 424/A2/mean_score.csv")
load("~/mean_score.csv")
mean_scores = read.csv("mean_score.csv", mean_score)
mean_scores = read.csv("mean_score.csv")
mean_scores = read.csv("mean_score.csv", row.names = F)
mean_scores = read.csv("mean_score.csv", row.names = NULL)
write.csv(mean_score, "/Users/leonli/Desktop/BMEG\ 424/A2/mean_score.csv", row.names = F)
mean_scores = read.csv("mean_score.csv", row.names = NULL)
# Include the code you used to generate the plot in this block. When you knit your document the plot will be generated and displayed below.
mean_score = read.csv("mean_score.csv", row.names = NULL)
barplot(t(abs(mean_score$hg19-mean_score$hg38)), names = mean_score$chr, beside = TRUE, col = c("blue", "red"), legend.text = TRUE, main = "Difference in mean alignment score between the hg19 and hg38", xlab = "Autosomal chromosomes", ylab = "Mean alignment score", las = 2)
# Include the code you used to generate the plot in this block. When you knit your document the plot will be generated and displayed below.
mean_score = read.csv("mean_score.csv", row.names = NULL)
barplot(t(abs(mean_score$hg19-mean_score$hg38)), names = mean_score$chr, beside = TRUE, legend.text = TRUE, main = "Difference in mean alignment score between the hg19 and hg38", xlab = "Autosomal chromosomes", ylab = "Mean alignment score", las = 2)
# Include the code you used to generate the plot in this block. When you knit your document the plot will be generated and displayed below.
mean_score = read.csv("mean_score.csv", row.names = NULL)
barplot(t(abs(mean_score$hg19-mean_score$hg38)), names = mean_score$chr, beside = TRUE, legend.text = TRUE, main = "Difference in mean alignment score between the hg19 and hg38", xlab = "Autosomal chromosomes", ylab = "Mean alignment score", las = 2)
barplot(t(as.matrix(mean_score[,2:3])), names = mean_score$chr, beside = TRUE, legend.text = TRUE, main = "Mean alignment score for hg19 and hg38", xlab = "Autosomal chromosomes", ylab = "Mean alignment score", las = 2)
# Include the code you used to generate the plot in this block. When you knit your document the plot will be generated and displayed below.
mean_score = read.csv("mean_score.csv", row.names = NULL)
barplot(t(abs(mean_score$hg19-mean_score$hg38)), names = mean_score$chr, beside = TRUE, legend.text = TRUE, main = "Difference in mean alignment score between the hg19 and hg38", xlab = "Autosomal chromosomes", ylab = "Mean alignment score", las = 2)
barplot(t(as.matrix(mean_score[,2:3])), names = mean_score$chr, beside = TRUE, legend.text = TRUE, main = "Mean alignment score for hg19 and hg38", xlab = "Autosomal chromosomes", ylab = "Mean alignment score", las = 2, col = c("green", "purple"))
merged$chr_hg38[which(merged$cleaned_chr_hg38 == "chr6")]
length(which(merged$chr_hg38[which(merged$cleaned_chr_hg38 == "chr6")] == "chr6"))
length(which(merged$chr_hg38[which(merged$cleaned_chr_hg38 == "chr6")] == "chr6")) / length(merged$chr_hg38[which(merged$cleaned_chr_hg38 == "chr6")])
length(which(merged$chr_hg38[which(merged$cleaned_chr_hg38 == "chr3")] == "chr6")) / length(merged$chr_hg38[which(merged$cleaned_chr_hg38 == "chr3")])
length(which(merged$chr_hg38[which(merged$cleaned_chr_hg38 == "chr3")] == "chr3")) / length(merged$chr_hg38[which(merged$cleaned_chr_hg38 == "chr3")])
length(which(merged$chr_hg19[which(merged$cleaned_chr_hg19 == "chr6")] == "chr6")) / length(merged$chr_hg19[which(merged$cleaned_chr_hg19 == "chr6")])
# Include the code you used to generate the plot in this block. When you knit your document the plot will be generated and displayed below.
#mean_score = data.frame(chr = sort(unique(merged$cleaned_chr_hg19)), hg19 = rep(0, 23), hg38 = rep(0,23))
# for (i in 1:23){
#   mean_score$hg19[i] = mean(merged$score_hg19[which(merged$cleaned_chr_hg19 == mean_score$chr[i])])
#   mean_score$hg38[i] = mean(merged$score_hg38[which(merged$cleaned_chr_hg38 == mean_score$chr[i])])
# }
mean_score = read.csv("mean_score.csv", row.names = NULL)
barplot(t(abs(mean_score$hg19-mean_score$hg38)), names = mean_score$chr, beside = TRUE, legend.text = TRUE, main = "Difference in mean alignment score between the hg19 and hg38", xlab = "Autosomal chromosomes", ylab = "Mean alignment score", las = 2)
barplot(t(as.matrix(mean_score[,2:3])), names = mean_score$chr, beside = TRUE, legend.text = TRUE, main = "Mean alignment score for hg19 and hg38", xlab = "Autosomal chromosomes", ylab = "Mean alignment score", las = 2, col = c("green", "purple"))
# Include the code you used to generate the plot in this block. When you knit your document the plot will be generated and displayed below.
diff_start = data.frame(chr = sort(unique(merged$cleaned_chr_hg39)), diff = rep(0, 23))
diff_start = data.frame(chr = sort(unique(merged$cleaned_chr_hg39)), diff = rep(0, 23))
sort(unique(merged$cleaned_chr_hg38))
diff_start = data.frame(chr = sort(unique(merged$cleaned_chr_hg38)), diff =rep(0, 23))
abs(diff(merged$start_hg38[which(merged$cleaned_chr_hg38 == diff_start$chr[i])], merged$start_hg19[which(merged$cleaned_chr_hg38 == diff_start$chr[i])]))
i = 1
merged$start_hg38[which(merged$cleaned_chr_hg38 == diff_start$chr[i])]
merged$start_hg38[which(merged$cleaned_chr_hg38 == diff_start$chr[i])] - merged$start_hg19[which(merged$cleaned_chr_hg38 == diff_start$chr[i])]
abs(merged$start_hg38[which(merged$cleaned_chr_hg38 == diff_start$chr[i])] - merged$start_hg19[which(merged$cleaned_chr_hg38 == diff_start$chr[i])])
summary(merged$start_hg38[which(merged$cleaned_chr_hg38 == diff_start$chr[i])] - merged$start_hg19[which(merged$cleaned_chr_hg38 == diff_start$chr[i])])
diff_start = data.frame(chr = sort(unique(merged$cleaned_chr_hg38)), diff =rep(0, 23))
for (i in 1:23){
diff_start$diff[i] = mean(merged$start_hg38[which(merged$cleaned_chr_hg38 == diff_start$chr[i])] - merged$start_hg19[which(merged$cleaned_chr_hg38 == diff_start$chr[i])])
}
View(diff_start)
diff_start = data.frame(chr = sort(unique(merged$cleaned_chr_hg38)), diff =rep(0, 23))
for (i in 1:23){
diff_start$diff[i] = abs(mean(merged$start_hg38[which(merged$cleaned_chr_hg38 == diff_start$chr[i])] - merged$start_hg19[which(merged$cleaned_chr_hg38 == diff_start$chr[i])]))
}
View(diff_start)
diff_start = data.frame(chr = sort(unique(merged$cleaned_chr_hg38)), diff =rep(0, 23))
for (i in 1:23){
diff_start$diff[i] = abs(mean(merged$start_hg38[which(merged$cleaned_chr_hg38 == diff_start$chr[i])] - merged$start_hg19[which(merged$cleaned_chr_hg38 == diff_start$chr[i])]))
}
barplot(t(diff_start$diff), names = diff_start$chr, beside = TRUE, legend.text = TRUE, main = "Difference in mean astart position between the hg19 and hg38", xlab = "Autosomal chromosomes", ylab = "absolute difference in start position", las = 2)
write.csv(diff_start, file = "/Users/leonli/Desktop/BMEG\ 424/A2/diff_start.csv", row.names = FALSE)
diff_start = read.csv(file = "diff_score.csv", row.names = NULL)
diff_start = read.csv(file = "diff_start.csv", row.names = NULL)
chisq.test(c(15416,13698,13544,12736,12698,14242,16832), p = 1/7)
chisq.test(c(15416,13698,13544,12736,12698,14242,16832), p = rep(1/7, 7)
)
result = chisq.test(c(15416,13698,13544,12736,12698,14242,16832), p = rep(1/7, 7))
result$p.value
result$statistic
matrix([77,18,79,38], nrow = 2)
matrix(c(77,18,79,38), nrow = 2)
result_2 = fisher.test(x = matrix(c(77,18,79,38), nrow = 2))
result_2$p.value
result_2 = chisq.test(x = matrix(c(77,18,79,38), nrow = 2))
result_2$p.value
result_2 = fisher.test(x = matrix(c(77,18,79,38), nrow = 2), alternative = "greater")
result_2$p.value
dhyper(77, m=95, n=117, k = 77+79)
pre_treatment = c(13.2, 14.5, 15.0, 12.8, 13.6, 14.2, 13.9, 14.1,
15.3, 13.5,14.4, 13.7, 14.0, 13.8, 14.6, 13.3, 14.3, 15.1, 14.7, 13.4)
post_treatment = c(14.7, 15.5, 16.0, 14.3, 14.6, 15.7, 14.9, 15.1,
16.8, 14.0,15.4, 14.2, 15.5, 15.3, 15.1, 14.8, 15.3, 16.1, 15.2, 14.5)
wilcox.test(post_treatment-pre_treatment, mu = 0, alternative = "greater", exact = F)
pwr.t.test(d = 0.1/sd(post_treatment-pre_treatment), sig.level = 0.05, type = "paired", alternative = "greater", p = 0.8130642)
library(pwr)
pwr.t.test(d = 0.1/sd(post_treatment-pre_treatment), sig.level = 0.05, type = "paired", alternative = "greater", p = 0.8130642)
A = c(0.85, 0.82, 0.81, 0.79, 0.83, 0.87, 0.84, 0.86, 0.80, 0.88, 0.82, 0.85, 0.83, 0.81, 0.84, 0.86, 0.82, 0.80, 0.88, 0.85, 0.83, 0.81, 0.80, 0.84, 0.85, 0.83, 0.81, 0.79, 0.87, 0.86, 0.82, 0.81, 0.84, 0.85, 0.83, 0.82, 0.86, 0.88, 0.81, 0.83, 0.84, 0.80, 0.82, 0.85, 0.86, 0.81, 0.83, 0.82, 0.84, 0.87)
B = c(0.78, 0.77, 0.75, 0.76, 0.79, 0.80, 0.82, 0.79, 0.77, 0.81, 0.78, 0.80, 0.76, 0.75, 0.78, 0.80, 0.77, 0.79, 0.76, 0.80, 0.79, 0.81, 0.78, 0.76, 0.79, 0.78, 0.77, 0.75, 0.76, 0.80, 0.78, 0.79, 0.76, 0.77, 0.79, 0.78, 0.80, 0.81, 0.79, 0.76, 0.78, 0.79, 0.77, 0.78, 0.80, 0.79, 0.77, 0.78, 0.81, 0.80)
mean_A = mean(A)
mean_B = mean(B)
se_A = sd(A) / sqrt(length(A))
se_B = sd(B) / sqrt(length(B))
se_a
se_A
se_B
data = data.frame(value = c(87.2, 88.3, 86.8, 89.2, 82.4, 83, 83.3, 83.8), Heel = rep(rep("No", "Yes", each = 2), 2), Stirring = rep("half", "four", each  = 4), Adding = rep(rep("2", "7"), 4))
rep("No", "Yes", each = 2)
rep(c("No", "Yes"), each = 2)
data = data.frame(value = c(87.2, 88.3, 86.8, 89.2, 82.4, 83, 83.3, 83.8), Heel = rep(rep(c("No", "Yes"), each = 2), 2), Stirring = rep(c("half", "four"), each  = 4), Adding = rep(rep(c("2", "7"), 4))
)
View(data)
interaction.plot(Adding, Stiring, data = data)
interaction.plot(x.factor = data$Adding, y.factor = data$Stiring,response = data$value)
interaction.plot(x.factor = data$Adding, y.factor = data$Stiring,trace.factor  = data$value)
interaction.plot(x.factor = data$Adding, y.factor = data$Stiring,trace.factor  = data$value, response = data$value)
interaction.plot(x.factor = data$Adding, y.factor = data$Stiring,trace.factor  = data$Stirring, response = data$value)
aov(value ~ Adding + Stiring + Heel, data = data)
aov(value ~ Adding + Stirring + Heel, data = data)
summary(aov(value ~ Adding + Stirring + Heel, data = data))
df(0.99, 1, 496)
qf(0.99, 1, 496)
qt(0.016, df = 443)
-0.153 / qt(0.016, df = 443)
pf(3.42, df1 = 1, df2 = 448-2)
1-pf(3.42, df1 = 1, df2 = 448-2)
1-pf(3.42, df1 = 4, df2 = 443)
pf(3.42, df1 = 4, df2 = 443, lower.tail = F)
fishData < − read.csv(“https://github.com/ybifoundation/Dataset/raw/main/Fish.csv”)
fishData <− read.csv(“https://github.com/ybifoundation/Dataset/raw/main/Fish.csv”)
fishData <- read.csv(“https://github.com/ybifoundation/Dataset/raw/main/Fish.csv”)
fishData = read.csv(“https://github.com/ybifoundation/Dataset/raw/main/Fish.csv”)
fishData = read.csv('https://github.com/ybifoundation/Dataset/raw/main/Fish.csv')
View(fishData)
lm = lm(Weight~Species+Height+Width+Length1+Length2+Length3)
lm = lm(Weight~Species+Height+Width+Length1+Length2+Length3, fishData)
summary(lm)
plot(lm)
knitr::opts_chunk$set(echo = TRUE)
lm = lm(Weight~Species+Height+Width+Length1+Length2+Length3, fishData)
plot(lm)
summary(lm)
unique(fishData$Species)
lm = lm(Weight~Species+Height+Width+Length1+Length2+Length3, fishData)
plot(lm)
summary(lm)
lm = lm(Weight~Height+Width+Length1+Length2+Length3, fishData)
plot(lm)
summary(lm)
lm = lm(Weight~Height^2+Height+Width+Length1+Length2+Length3, fishData)
plot(lm)
summary(lm)
lm = lm(Weight^2~Height+Width+Length1+Length2+Length3, fishData)
plot(lm)
summary(lm)
cor(fishData)
cor(fishData$Height, fishData$Width)
plot(fishData$Height, fishData$Width)
plot(fishData$Height, fishData$Length1)
plot(fishData$Height, fishData$Length2)
plot(fishData$Height, fishData$Length3)
plot(fishData$Height, fishData$Length2)
plot(fishData$Height, fishData$Length1)
plot(fishData$Width, fishData$Length1)
plot(fishData$Width, fishData$Length2)
plot(fishData$Width, fishData$Length3)
plot(fishData$Length1, fishData$Length3)
plot(fishData$Length2, fishData$Length3)
plot(fishData$Length3, fishData$Length3)
plot(fishData$Length1, fishData$Length3)
plot(fishData$Length2, fishData$Length3)
plot(fishData$Length1, fishData$Length2)
plot(fishData$Height, fishData$Width)
plot(fishData$Height, fishData$Length1)
plot(fishData$Height, fishData$Length2)
plot(fishData$Height, fishData$Length3)
plot(fishData$Width, fishData$Length1)
plot(fishData$Width, fishData$Length2)
plot(fishData$Width, fishData$Length3)
plot(fishData$Length1, fishData$Length3)
plot(fishData$Length2, fishData$Length3)
plot(fishData$Length1, fishData$Length2)
plot(fishData$Height, fishData$Width)
plot(fishData$Height, fishData$Length1)
plot(fishData$Height, fishData$Length2)
plot(fishData$Height, fishData$Length3)
plot(fishData$Width, fishData$Length1)
plot(fishData$Width, fishData$Length2)
plot(fishData$Width, fishData$Length3)
plot(fishData$Length1, fishData$Length3)
plot(fishData$Length2, fishData$Length3)
plot(fishData$Length1, fishData$Length2)
print(cor(fishData$Height, fishData$Width)
cor(fishData$Height, fishData$Length1)
plot(fishData$Height, fishData$Width)
plot(fishData$Height, fishData$Length1)
plot(fishData$Height, fishData$Length2)
plot(fishData$Height, fishData$Length3)
plot(fishData$Width, fishData$Length1)
plot(fishData$Width, fishData$Length2)
plot(fishData$Width, fishData$Length3)
plot(fishData$Length1, fishData$Length3)
plot(fishData$Length2, fishData$Length3)
plot(fishData$Length1, fishData$Length2)
print(cor(fishData$Height, fishData$Width),
cor(fishData$Height, fishData$Length1),
cor(fishData$Height, fishData$Length2),
cor(fishData$Height, fishData$Length3),
cor(fishData$Width, fishData$Length1),
cor(fishData$Width, fishData$Length2),
cor(fishData$Width, fishData$Length3),
cor(fishData$Length1, fishData$Length3),
cor(fishData$Length2, fishData$Length3),
cor(fishData$Length1, fishData$Length2))
plot(fishData$Height, fishData$Width)
plot(fishData$Height, fishData$Length1)
plot(fishData$Height, fishData$Length2)
plot(fishData$Height, fishData$Length3)
plot(fishData$Width, fishData$Length1)
plot(fishData$Width, fishData$Length2)
plot(fishData$Width, fishData$Length3)
plot(fishData$Length1, fishData$Length3)
plot(fishData$Length2, fishData$Length3)
plot(fishData$Length1, fishData$Length2)
print(c(cor(fishData$Height, fishData$Width),
cor(fishData$Height, fishData$Length1),
cor(fishData$Height, fishData$Length2),
cor(fishData$Height, fishData$Length3),
cor(fishData$Width, fishData$Length1),
cor(fishData$Width, fishData$Length2),
cor(fishData$Width, fishData$Length3),
cor(fishData$Length1, fishData$Length3),
cor(fishData$Length2, fishData$Length3),
cor(fishData$Length1, fishData$Length2)))
lm = lm(Weight~Height, fishData)
plot(lm)
summary(lm)
lm = lm(Weight~Height^2, fishData)
plot(lm)
summary(lm)
lm = lm(Weight~Height+Width+Length1+Length2+Length3, fishData)
plot(lm)
summary(lm)
lm = lm(Weight~Height+Width+Length1, fishData)
plot(lm)
summary(lm)
fishData['center_h'] = fishData$Height - mean(fishData$Height)
fishData['center_h'] = fishData$Height - mean(fishData$Height)
fishData['center_h'] = fishData$Height - mean(fishData$Height)
fishData['center_w'] = fishData$Width - mean(fishData$Width)
fishData['center_l'] = fishData$Length1 - mean(fishData$Length1)
summary(lm(Weight~center_h+center_w+center_l, fishData))
fishData['center_h'] = fishData$Height - mean(fishData$Height)
fishData['center_w'] = fishData$Width - mean(fishData$Width)
fishData['center_l'] = fishData$Length1 - mean(fishData$Length1)
fishData['h_2'] = fishData$Height^2
summary(lm(Weight~h_2, fishData))
fishData['center_h'] = fishData$Height - mean(fishData$Height)
fishData['center_w'] = fishData$Width - mean(fishData$Width)
fishData['center_l'] = fishData$Length1 - mean(fishData$Length1)
fishData['h_2'] = fishData$Height^2
fishData['w_2'] = fishData$Width^2
fishData['l_2'] = fishData$Length1^2
summary(lm(Weight~h_2+w_2+l_2, fishData))
fishData['center_h'] = fishData$Height - mean(fishData$Height)
fishData['center_w'] = fishData$Width - mean(fishData$Width)
fishData['center_l'] = fishData$Length1 - mean(fishData$Length1)
fishData['h_2'] = fishData$Height^2
fishData['w_2'] = fishData$Width^2
fishData['l_2'] = fishData$Length1^2
summary(lm(Weight~h_2+w_2+l_2+Height+Width+Length1, fishData))
fishData['center_h'] = fishData$Height - mean(fishData$Height)
fishData['center_w'] = fishData$Width - mean(fishData$Width)
fishData['center_l'] = fishData$Length1 - mean(fishData$Length1)
fishData['h_2'] = fishData$Height^2
fishData['w_2'] = fishData$Width^2
fishData['l_2'] = fishData$Length1^2
summary(lm(Weight~h_2+w_2+l_2+Height+Width+Length1, fishData))
summary(lm(Weight~Height, fishData))
fishData['center_h'] = fishData$Height - mean(fishData$Height)
fishData['center_w'] = fishData$Width - mean(fishData$Width)
fishData['center_l'] = fishData$Length1 - mean(fishData$Length1)
fishData['h_2'] = fishData$Height^2
fishData['w_2'] = fishData$Width^2
fishData['l_2'] = fishData$Length1^2
summary(lm(Weight~h_2+w_2+l_2+Height+Width+Length1, fishData))
summary(lm(Weight~h_2+w_2+l_2, fishData))
fishData['center_h'] = fishData$Height - mean(fishData$Height)
fishData['center_w'] = fishData$Width - mean(fishData$Width)
fishData['center_l'] = fishData$Length1 - mean(fishData$Length1)
fishData['h_2'] = fishData$Height^2
fishData['w_2'] = fishData$Width^2
fishData['l_2'] = fishData$Length1^2
lm_2 = lm(Weight~h_2+w_2+l_2+Height+Width+Length1, fishData)
plot(lm_2)
library("edgeR")
library("ggplot2")
library("matrixStats")
library("matrixStats")
library(stringr)
library(DescTools)
memory.limit(60000)
setwd("~/Desktop/BMEG 424/neuronal-cell-type-classification/")
# Loads in data
intron_matrix <- read.csv("human_MTG_2018-06-14_intron-matrix.csv")
# Loads in data
intron_matrix <- read.csv("data/human_MTG_2018-06-14_intron-matrix.csv")
exon_matrix <- read.csv("data/human_MTG_2018-06-14_exon-matrix.csv")
fishData['center_h'] = fishData$Height - mean(fishData$Height)
fishData['center_w'] = fishData$Width - mean(fishData$Width)
fishData['center_l'] = fishData$Length1 - mean(fishData$Length1)
fishData['h_2'] = fishData$Height^2
fishData['w_2'] = fishData$Width^2
fishData['l_2'] = fishData$Length1^2
lm_2 = lm(Weight~h_2+w_2+l_2+Height+Width+Length1, fishData)
#plot(lm_2)
fishData['center_h'] = fishData$Height - mean(fishData$Height)
fishData['center_w'] = fishData$Width - mean(fishData$Width)
fishData['center_l'] = fishData$Length1 - mean(fishData$Length1)
fishData['h_2'] = fishData$Height^2
fishData['w_2'] = fishData$Width^2
fishData['l_2'] = fishData$Length1^2
lm_2 = lm(Weight~h_2+w_2+l_2+Height+Width+Length1, fishData)
summary(lm_2)
lm = lm(Weight~Height+Width+Length1+Length2+Length3, fishData)
plot(lm)
summary(lm)
lm = lm(Weight~Height+Width+Length1+Length2+Length3, fishData)
plot(lm)
plot(fishData$Height, resid(lm))
summary(lm)
lm = lm(Weight~Height+Width+Length1+Length2+Length3, fishData)
plot(lm)
plot(fishData$Height, resid(lm))
plot(fishData$Width, resid(lm))
plot(fishData$Length1, resid(lm))
plot(fishData$Length2, resid(lm))
plot(fishData$Length3, resid(lm))
summary(lm)
fishData['h_2'] = fishData$Height^2
fishData['w_2'] = fishData$Width^2
fishData['avg_l']  = (fishData$Length1+fishData$Length2+fishData$Length3)/3
fishData['l_2'] = fishData$avg_l^2
lm_2 = lm(Weight~h_2+w_2+l_2+Height+Width+avg_l, fishData)
summary(lm_2)
fishData['h_2'] = fishData$Height^2
fishData['w_2'] = fishData$Width^2
fishData['avg_l']  = (fishData$Length1+fishData$Length2+fishData$Length3)/3
fishData['l_2'] = fishData$avg_l^2
lm_2 = lm(Weight~h_2+w_2+l_2, fishData)
summary(lm_2)
fishData['h_2'] = fishData$Height^2
fishData['w_2'] = fishData$Width^2
fishData['avg_l']  = (fishData$Length1+fishData$Length2+fishData$Length3)/3
fishData['l_2'] = fishData$avg_l^2
lm_2 = lm(Weight~h_2+w_2+l_2+Height+Width+avg_l, fishData)
summary(lm_2)
birthwt <- read.csv("~/Downloads/birthwt.csv")
View(birthwt)
View(birthwt)
View(birthwt)
aov(bwt~race+smoke, data = birthwt)
summary(aov(bwt~race+smoke, data = birthwt))
with(data, interaction.plot(x.factor = race, trace.factor = smoke, response = bwt,
type = "b", # Type "b" for both points and lines
legend = TRUE, # Add a legend
xlab = "Race", ylab = "Birth Weight",
trace.label = "Smoking Status"))
with(data, interaction.plot(x.factor = race, trace.factor = smoke, response = bwt)
with(data, interaction.plot(x.factor = race, trace.factor = smoke, response = bwt))
library(ggplot2)
ggplot(data, aes(x = factor(race), y = bwt, color = factor(smoke))) +
geom_point(position = position_dodge(width = 0.2)) +  # Separate points slightly for clarity
geom_line(aes(group = factor(smoke)), position = position_dodge(width = 0.2)) +
labs(x = "Race", y = "Birth Weight", color = "Smoking Status") +
theme_minimal()
library(ggplot2)
ggplot(birthwt, aes(x = factor(race), y = bwt, color = factor(smoke))) +
geom_point(position = position_dodge(width = 0.2)) +  # Separate points slightly for clarity
geom_line(aes(group = factor(smoke)), position = position_dodge(width = 0.2)) +
labs(x = "Race", y = "Birth Weight", color = "Smoking Status") +
theme_minimal()
summary(aov(bwt~race+smoke+race*smoke, data = birthwt))
summary(lm(bwt~race, data = birthwt))
summary(lm(bwt~factor(race), data = birthwt))
factor(birthwt$race)
summary(lm(bwt~factor(race)+age, data = birthwt))
lm_3 = lm(bwt~factor(race)+age, data = birthwt)
new_data <- data.frame(race = c(3), age = c(30))
predict(lm_3, newdata = new_data)
